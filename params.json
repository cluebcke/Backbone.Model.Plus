{"name":"Backbone.Model.Plus","tagline":"Backbone.Model plugin that provides support for computed values (getters),  mutators (setters), and nested data structures.","body":"## Backbone.Model.Plus\r\nBackbone plugin that provides support for accessors, mutators and nested\r\nobjects.\r\n\r\n## Build Status, Project Page, Annotated Source & Tests\r\n[![Build Status](https://secure.travis-ci.org/asciidisco/Backbone.Mutators.png?branch=master)](http://travis-ci.org/asciidisco/Backbone.Mutators)\r\n[![Unit Test Status](https://saucelabs.com/buildstatus/asciidisco)](https://saucelabs.com/u/asciidisco)<br /><br />\r\n[Project Page](http://asciidisco.github.com/Backbone.Mutators/index.html)<br />\r\n[Docs](http://asciidisco.github.com/Backbone.Mutators/docs/backbone.mutators.html)<br />\r\n[Tests](http://asciidisco.github.com/Backbone.Mutators/test/index.html)<br />\r\n[NPM registry](http://search.npmjs.org/#/Backbone.Mutators)\r\n\r\n## Introduction\r\nBackbone.Model.Plus is a fork of [Backbone.Mutators]((http://asciidisco.github.com/Backbone.Mutators/index.html)\r\nthat adds support for nested objects in the model (e.g. name.first). I created\r\nthis fork because I love and rely upon Backbone.Mutators, but since it overrides\r\nBackbone's get() and set() methods, I can't use it in conjunction with other\r\nmodel plugins (like [backbone-deep-model](https://github.com/powmedia/backbone-deep-model)).\r\n\r\n## Installation\r\n\r\nThe plugin itself implements the Universal Module Definition (UMD).\r\nYou can use it with a CommonJS like loader, or with an AMD loader or via\r\nvanilla javascript.\r\n\r\nThe plugin has two dependencies, underscore.js and backbone.js\r\n\r\n### Download\r\nYou can directly download the\r\n[Development Version](https://raw.github.com/cluebcke/Backbone.Model.Plus/master/backbone.model.plus.js)\r\nor the\r\n[Production Version](https://raw.github.com/cluebcke/Backbone.Model.Plus/master/backbone.model.plus.min.js)\r\nfrom the root folder\r\n\r\n## Integration\r\n\r\n### AMD\r\n```javascript\r\n// AMD\r\nrequire(['underscore', 'backbone', 'path/to/backbone.model.plus'], function (_, Backbone, ModelPlus) {\r\n  /* Do stuff with Backbone here */\r\n});\r\n```\r\n\r\n### CommonJS\r\n```javascript\r\n// CommonJS\r\nvar _ = require('underscore');\r\nvar Backbone = require('backbone');\r\nvar Mutators = require('backbone.model.plus');\r\n```\r\n\r\n### Vanilla JS\r\n```html\r\n<!-- Vanilla javascript -->\r\n<script src=\"path/to/underscore.js\"></script>\r\n<script src=\"path/to/backbone.js\"></script>\r\n<script src=\"path/to/backbone.model.plus.js\"></script>\r\n<script>\r\n\tconsole.log(Backbone.ModelPlus); // Backbone and the Mutators property are globals\r\n</script>\r\n```\r\n\r\n## Usage\r\nSome lines of code explain more then thousand words...\r\n\r\n### Basic usage\r\n```javascript\r\n var User = Backbone.Model.extend({\r\n \t// Define mutator properties\r\n    mutators: {\r\n        fullname: function () {\r\n            return this.get('firstname') + ' ' + this.get('lastname');\r\n        }\r\n    },\r\n    defaults: {\r\n    \tfirstname: 'Sugar',\r\n        lastname: 'Daddy'\r\n    }\r\n });\r\n\r\n var user = new User();\r\n // use get to get the 'mutated' value\r\n user.get('fullname') // 'Sugar Daddy'\r\n // serialize the model and see the 'mutated' value in the resulting JSON\r\n user.toJSON() // '{firstname: 'Sugar', lastname: 'Daddy', fullname: 'Sugar Daddy'}'\r\n```\r\n\r\n### Override getters\r\n```javascript\r\n var State = Backbone.Model.extend({\r\n \t// Define mutator properties\r\n    mutators: {\r\n        status: function () {\r\n            return this.get('status') === true ? 'Workish' : 'Bad bad error';\r\n        }\r\n    },\r\n    defaults: {\r\n    \tstatus: true\r\n    }\r\n });\r\n\r\n var state = new State();\r\n // use get to get the 'mutated' value\r\n state.get('status') // 'Workish'\r\n // serialize the model and see the 'mutated' value in the resulting JSON\r\n state.toJSON() // '{status: 'Workish'}'\r\n```\r\n\r\n### Use setters\r\n```javascript\r\n var User = Backbone.Model.extend({\r\n \t// Define mutator properties\r\n    mutators: {\r\n        fullname: {\r\n\t\t\tset: function (key, value, options, set) {\r\n\t\t\t\tvar names = value.split(' ');\r\n\t\t\t\tthis.set('firstname', names[0], options);\r\n\t\t\t\tthis.set('lastname', names[1], options);\r\n\t\t\t},\r\n        \tget: function () {\r\n            \treturn this.get('firstname') + ' ' + this.get('lastname');\r\n        \t}\r\n        }\r\n    },\r\n    defaults: {\r\n    \tfirstname: 'Sugar',\r\n        lastname: 'Daddy'\r\n    }\r\n });\r\n\r\n var user = new User();\r\n // use get to get the 'mutated' value\r\n user.set('fullname', 'Big Mama', {silent: true});\r\n // serialize the model and see the 'mutated' value in the resulting JSON\r\n user.get('fullname') // 'Big Mama'\r\n user.get('firstname'); // 'Big'\r\n user.get('lastname'); // 'Mama'\r\n```\r\n\r\n### Catch model events\r\n```javascript\r\n var User = Backbone.Model.extend({\r\n    // Define mutator properties\r\n    mutators: {\r\n        fullname: {\r\n            set: function (key, value, options, set) {\r\n                var names = value.split(' ');\r\n                this.set('firstname', names[0], options);\r\n                this.set('lastname', names[1], options);\r\n            },\r\n            get: function () {\r\n                return this.get('firstname') + ' ' + this.get('lastname');\r\n            }\r\n        }\r\n    },\r\n    defaults: {\r\n        firstname: 'Sugar',\r\n        lastname: 'Daddy'\r\n    }\r\n });\r\n\r\n var user = new User();\r\n\r\n // bind mutator event\r\n user.bind('mutators:set:fullname', function () {\r\n    console.log('Somebody sets a full name');\r\n });\r\n\r\n // bind model events\r\n user.bind('change:firstname', function () {\r\n    console.log('Somebody changed the first name');\r\n });\r\n\r\n  // bind model events\r\n user.bind('change:lastname', function () {\r\n    console.log('Somebody changed the last name');\r\n });\r\n\r\n // use get to get the 'mutated' value\r\n user.set('fullname', 'Big Mama');\r\n\r\n // serialize the model and see the 'mutated' value in the resulting JSON\r\n user.get('fullname') // 'Big Mama'\r\n user.get('firstname'); // 'Big'\r\n user.get('lastname'); // 'Mama'\r\n```\r\n\r\n### Silence mutator events (while keeping the model events fired)\r\n```javascript\r\n var User = Backbone.Model.extend({\r\n    // Define mutator properties\r\n    mutators: {\r\n        fullname: {\r\n            set: function (key, value, options, set) {\r\n                var names = value.split(' ');\r\n                this.set('firstname', names[0], options);\r\n                this.set('lastname', names[1], options);\r\n            },\r\n            get: function () {\r\n                return this.get('firstname') + ' ' + this.get('lastname');\r\n            }\r\n        }\r\n    },\r\n    defaults: {\r\n        firstname: 'Sugar',\r\n        lastname: 'Daddy'\r\n    }\r\n });\r\n\r\n var user = new User();\r\n\r\n // bind mutator event\r\n // will never be run\r\n user.bind('mutators:set:fullname', function () {\r\n    console.log('Somebody sets a full name');\r\n });\r\n\r\n // bind model events\r\n // will still run\r\n user.bind('change:firstname', function () {\r\n    console.log('Somebody changed the first name');\r\n });\r\n\r\n // bind model events\r\n // will still run\r\n user.bind('change:lastname', function () {\r\n    console.log('Somebody changed the last name');\r\n });\r\n\r\n // use get to get the 'mutated' value\r\n user.set('fullname', 'Big Mama', {mutators: {silence: true}});\r\n\r\n // serialize the model and see the 'mutated' value in the resulting JSON\r\n user.get('fullname') // 'Big Mama'\r\n user.get('firstname'); // 'Big'\r\n user.get('lastname'); // 'Mama'\r\n```\r\n\r\n### Use mutated setters and call the original setter within\r\n```javascript\r\n var Spicy = Backbone.Model.extend({\r\n    // Define mutator properties\r\n    mutators: {\r\n        iAcceptOnlyLowercaseStuff: {\r\n            set: function (key, value, options, set) {\r\n                // call the original setter with the lowercased value\r\n                set(key, value.toLowerCase(), options);\r\n            }\r\n        }\r\n    },\r\n    defaults: {\r\n        iAcceptOnlyLowercaseStuff: 'sugar'\r\n    }\r\n });\r\n\r\n var spicy = new Spicy();\r\n // use get to get the 'mutated' value\r\n spicy.set('iAcceptOnlyLowercaseStuff', 'SALT');\r\n spicy.get('iAcceptOnlyLowercaseStuff') // 'salt'\r\n```\r\n\r\n### Define one getter / setter method\r\n```javascript\r\n var User = Backbone.Model.extend({\r\n    // Define mutator properties\r\n    mutators: {\r\n        fullname: function (key, value, options, set) {\r\n            if(key){\r\n                var names = value.split(' ');\r\n                this.set('firstname', names[0], options);\r\n                this.set('lastname', names[1], options);\r\n            }\r\n\r\n            return this.get('firstname') + ' ' + this.get('lastname');\r\n        }\r\n    },\r\n    defaults: {\r\n        firstname: 'Sugar',\r\n        lastname: 'Daddy'\r\n    }\r\n });\r\n```\r\n\r\n### Define multiple mutators\r\n```javascript\r\n var User = Backbone.Model.extend({\r\n \t// Define mutator properties\r\n    mutators: {\r\n        fullname: {\r\n\t\t\tset: function (key, value, options, set) {\r\n\t\t\t\tvar names = value.split(' ');\r\n\t\t\t\tthis.set('firstname', names[0], options);\r\n\t\t\t\tthis.set('lastname', names[1], options);\r\n\t\t\t}\r\n        \tget: function () {\r\n                return this.get('firstname') + ' ' + this.get('lastname');\r\n        \t}\r\n        },\r\n        password: function () {\r\n    \t\treturn md5(this.password);\r\n    \t}\r\n    },\r\n    defaults: {\r\n    \tfirstname: 'Sugar',\r\n        lastname: 'Daddy'\r\n    }\r\n });\r\n```\r\n\r\n### Define a getter as transient\r\nDefining a getter as transient means that it will be omitted when Backbone saves the model. This is\r\nuseful if the backend system (whatever Backbone is syncing to) fails if you send it a property that does\r\nnot actually exist on the model. Note that this only works for mutators defined with a `get()`\r\nfunction.\r\n\r\nIn the example below, the `fullName` property will be available when toJSON is called under\r\nnon-syncing circumstances--for example, when providing this model to a template--but will be omitted\r\nfrom the JSON when sync is called (because you called the `sync()` or `save()` method), and will not\r\nbe sent to the server.\r\n```javascript\r\nvar Model = Backbone.Model.extend({\r\n  defaults:{\r\n    firstName:\"Iain\",\r\n    middleInit:\"M\",\r\n    lastName:\"Banks\"\r\n  },\r\n  mutators:{\r\n    fullName:{\r\n      get: function() {\r\n        var fullName = this.get(\"firstName\");\r\n        fullName += \" \" + this.get(\"middleInit\");\r\n        fullName += \". \" + this.get(\"lastName\");\r\n        return fullName;\r\n      },\r\n      transient: true\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n## Further reading\r\nJames Brown ([@ibjhb](https://github.com/ibjhb/Exploring-Backbone.Mutators))\r\nhas written a blog article about Mutators ([Exploring Backbone.Mutators](http://ja.mesbrown.com/2012/03/exploring-backbone-mutators-plugin/))\r\n\r\n## Changelog\r\n\r\n### 0.4.1\r\n+ Fixes [#22](https://github.com/asciidisco/Backbone.Mutators/pull/22)\r\n+ Fixes [#24](https://github.com/asciidisco/Backbone.Mutators/pull/24)\r\n\r\n### 0.3.1\r\n+ Change get context to modal instead of attributes\r\n+ Added single getter / setter method\r\n\r\n### 0.3.1\r\n+ Change get context to modal instead of attributes\r\n+ Added single getter / setter method\r\n\r\n### 0.3.0\r\n+ Removed the Cake based build process and moved to grunt\r\n+ Mutators now integrates itself to backbone, no more manual extending needed\r\n+ Added the {mutator: {silent: true}} option to prevent mutator set events from firering\r\n+ Added unit tests for the new features\r\n+ Moved from jslint to jshint\r\n+ Tweaked docs\r\n+ Removed not needed jquery and qunit-logging submodule / npm dependencies\r\n\r\n### 0.2.0\r\n+ Added the original Backbone.Model.set function as a fourth paramter for the mutated set\r\n+ Added a 'mutators:set:{{YOUR_MUTATOR_PROPERTY}}' event when setting mutated properties\r\n+ Added unit tests for the new features\r\n+ Extended/fixed documentation\r\n+ Added inline version tag [NOTE: Version 0.2.0 is fully backwards compatible]\r\n\r\n### 0.1.0\r\n+ Initial Release\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}